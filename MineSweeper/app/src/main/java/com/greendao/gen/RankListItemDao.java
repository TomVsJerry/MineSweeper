package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cwh.minesweeper.greendao.RankListItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RANK_LIST_ITEM".
*/
public class RankListItemDao extends AbstractDao<RankListItem, Long> {

    public static final String TABLENAME = "RANK_LIST_ITEM";

    /**
     * Properties of entity RankListItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RankType = new Property(1, Integer.class, "rankType", false, "RANK_TYPE");
        public final static Property CostTime = new Property(2, Long.class, "costTime", false, "COST_TIME");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
    }


    public RankListItemDao(DaoConfig config) {
        super(config);
    }
    
    public RankListItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RANK_LIST_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"RANK_TYPE\" INTEGER," + // 1: rankType
                "\"COST_TIME\" INTEGER," + // 2: costTime
                "\"DATE\" TEXT);"); // 3: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RANK_LIST_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RankListItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer rankType = entity.getRankType();
        if (rankType != null) {
            stmt.bindLong(2, rankType);
        }
 
        Long costTime = entity.getCostTime();
        if (costTime != null) {
            stmt.bindLong(3, costTime);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RankListItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer rankType = entity.getRankType();
        if (rankType != null) {
            stmt.bindLong(2, rankType);
        }
 
        Long costTime = entity.getCostTime();
        if (costTime != null) {
            stmt.bindLong(3, costTime);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RankListItem readEntity(Cursor cursor, int offset) {
        RankListItem entity = new RankListItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // rankType
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // costTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RankListItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRankType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCostTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RankListItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RankListItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RankListItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
